service: passwordless-phone-number-otp-cognito
useDotenv: true
frameworkVersion: '3'

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  region: <aws-region>

# custom:
  # replace with your verified SES domain
  # emailAddress: manantest123@gmail.com

functions:

  preSignUp:
    handler: functions/pre-sign-up.handler

  defineAuthChallenge:
    handler: functions/define-auth-challenge.handler
  
  createAuthChallenge:
    handler: functions/create-auth-challenge.handler

    iamRoleStatements:
      - Effect: Allow
        Action: sns:Publish
        Resource: "*"

  verifyAuthChallengeResponse:
    handler: functions/verify-auth-challenge-response.handler
    
  signup:
    handler: functions/signup.handler
    events:
      - http:
          path: signup
          method: post

  signin:
    handler: functions/signin.handler
    events:
      - http:
          path: signin
          method: post

  confirmOtp:
    handler: functions/confirmOtp.handler
    events:
      - http:
          path: confirmOtp
          method: post

resources:
  Resources:    
    PasswordlessOtpUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UsernameConfiguration:
          CaseSensitive: false
        UsernameAttributes:
          - phone_number
        Policies:
          # this is only to satisfy Cognito requirements
          # we won't be using passwords, but we also don't
          # want weak passwords in the system ;-)
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: true
            RequireUppercase: false
            RequireSymbols: false
        Schema:
          - AttributeDataType: String
            Mutable: false
            Required: true
            Name: phone_number
            StringAttributeConstraints: 
              MinLength: '8'
        LambdaConfig:
          PreSignUp: !GetAtt PreSignUpLambdaFunction.Arn
          DefineAuthChallenge: !GetAtt DefineAuthChallengeLambdaFunction.Arn
          CreateAuthChallenge: !GetAtt CreateAuthChallengeLambdaFunction.Arn
          VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponseLambdaFunction.Arn

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref PasswordlessOtpUserPool
        ExplicitAuthFlows:
          - ALLOW_CUSTOM_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    UserPoolPreSignUpLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref PreSignUpLambdaFunction
        SourceArn: !GetAtt PasswordlessOtpUserPool.Arn

    UserPoolDefineAuthChallengeLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref DefineAuthChallengeLambdaFunction
        SourceArn: !GetAtt PasswordlessOtpUserPool.Arn

    UserPoolCreateAuthChallengeLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref CreateAuthChallengeLambdaFunction
        SourceArn: !GetAtt PasswordlessOtpUserPool.Arn

    UserPoolVerifyAuthChallengeResponseLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref VerifyAuthChallengeResponseLambdaFunction
        SourceArn: !GetAtt PasswordlessOtpUserPool.Arn
